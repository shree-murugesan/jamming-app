{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","console","log","noResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88a0b203.chunk.js","sourcesContent":["let accessToken;\nconst client_id='4d0e7e434f8248ee977ac2d5beeebeae';\nconst redirectUri='http://localhost:3000/';\n\nconst Spotify = {\n\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n\n        //check if access token expired\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        }\n        \n        //access token isn't in the URL and empty\n        else {\n            const accessUrl=`https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}` , {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n\n    savePlaylist(name, trackUris) {\n        if(!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                })\n            })\n        });\n    }\n\n}\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state={\n            term: ''\n        };\n\n        this.search=this.search.bind(this);\n        this.handleTermChange=this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    render() {\n        return(\n            <div className=\"SearchBar\">\n            <input placeholder=\"Enter A Song, Album, or Artist\" \n            onChange={this.handleTermChange}/>\n            <button className=\"SearchButton\"\n                    onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    \n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n    \n    render() {\n        return(\n            <div className=\"Track\">\n            <div className=\"Track-information\">\n            <h3>{this.props.track.name}</h3>\n            <p>{this.props.track.artist} | {this.props.track.album}</p>\n            </div>\n            {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n\n    render() {\n        return(\n            <div className=\"TrackList\">\n            {this.props.tracks.map(track => {\n                return <Track track={track} key={track.id} \n                            onAdd={this.props.onAdd}\n                            onRemove={this.props.onRemove}\n                            isRemoval={this.props.isRemoval}/>\n            })}\n            </div>\n        )\n    }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n\n    renderAction() {\n        console.log(this.props.noResults);\n        if (this.props.noResults) {\n            return <p>No results found</p>\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList tracks={this.props.searchResults}\n                        onAdd={this.props.onAdd}\n                        isRemoval={false}/>\n            {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    \n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return(\n            <div className=\"Playlist\">\n\n            <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n            <TrackList tracks={this.props.playlistTracks} \n            onRemove={this.props.onRemove}\n            isRemoval = {true}/>\n            <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            searchResults: [],\n            noResults: true,\n            playlistName: 'New Playlist',\n            playlistTracks: []\n        };\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n        this.updatePlaylistName = this.updatePlaylistName.bind(this);\n        this.savePlaylist = this.savePlaylist.bind(this);\n        this.search = this.search.bind(this);\n    }\n    \n    addTrack(track) {\n        let tracks = this.state.playlistTracks;\n        if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n            return;\n        }\n        \n        tracks.push(track);\n        this.setState({playlistTracks: tracks});\n    }\n\n    removeTrack(track) {\n        let tracks = this.state.playlistTracks;\n        tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n        this.setState({playlistTracks: tracks});\n    }\n\n    updatePlaylistName(name) {\n        this.setState({playlistName: name});\n    }\n\n    savePlaylist() {\n        const trackUris = this.state.playlistTracks.map(track => track.uri);\n        Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n            this.setState({\n                playlistName: 'New Playlist',\n                playlistTracks: []\n            });\n        });\n    }\n\n    search(term) {\n        Spotify.search(term).then(searchResults => {\n            this.setState({searchResults: searchResults});\n            if (this.state.searchResults.length === 0) {\n                this.setState({noResults: true});\n                console.log(\"Oops! No results were found for that term.\");\n            } else {\n                this.setState({noResults: false});\n            }\n        });\n    }\n    \n    render() {\n        return(\n            <div>\n                <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n                <div className=\"App\">\n                    <SearchBar onSearch={this.search}/>\n                    <div className=\"App-playlist\">\n                        <SearchResults searchResults={this.state.searchResults} \n                                       onAdd={this.addTrack}\n                                       onSearch={this.search}\n                                       noResults={this.noResults}/>\n                        <Playlist playlistName={this.state.playlistName} \n                                  playlistTracks={this.state.playlistTracks}\n                                  onRemove={this.removeTrack} \n                                  onNameChange={this.updatePlaylistName} \n                                  onSave={this.savePlaylist}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}